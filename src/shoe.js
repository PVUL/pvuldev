/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/
import React, { useRef, useState, useEffect } from 'react'
import { useGLTF } from '@react-three/drei'
import { useSnapshot } from 'valtio'
import { useFrame } from '@react-three/fiber'

import { Cursor } from './assets/cursor'
import { GlobalState } from './globalState'

export const Shoe = (props: any) => {
  const group = useRef()
  const snapshot = useSnapshot(GlobalState)
  const { nodes, materials } = useGLTF('/shoe.glb')
  const [hoveredItem, setHoveredItem] = useState(null)

  useFrame((state) => {
    const t = state.clock.getElapsedTime()
    group.current.rotation.z = -0.2 - (1 + Math.sin(t / 1.5)) / 20
    group.current.rotation.x = Math.cos(t / 4) / 8
    group.current.rotation.y = Math.sin(t / 4) / 8
    group.current.position.y = (1 + Math.sin(t / 1.5)) / 10
  })

  useEffect(() => {
    document.body.style.cursor = `url('data:image/svg+xml;base64,${btoa(
      hoveredItem ? Cursor.hovered(hoveredItem, snapshot.items[hoveredItem]) : Cursor.auto,
    )}'), auto`
  }, [hoveredItem, snapshot])

  return (
    <group
      ref={group}
      {...props}
      dispose={null}
      onPointerOver={(e) => {
        e.stopPropagation()
        setHoveredItem(e.object.material.name)
      }}
      onPointerOut={(e) => {
        e.intersections.length === 0 && setHoveredItem(null)
      }}
      onPointerDown={(e) => {
        e.stopPropagation()
        GlobalState.current = e.object.material.name
      }}
      onPointerMissed={(e) => {
        GlobalState.current = null
      }}
    >
      <mesh geometry={nodes.shoe.geometry} material={materials.laces} material-color={snapshot.items.laces} />
      <mesh geometry={nodes.shoe_1.geometry} material={materials.mesh} material-color={snapshot.items.mesh} />
      <mesh geometry={nodes.shoe_2.geometry} material={materials.caps} material-color={snapshot.items.caps} />
      <mesh geometry={nodes.shoe_3.geometry} material={materials.inner} material-color={snapshot.items.inner} />
      <mesh geometry={nodes.shoe_4.geometry} material={materials.sole} material-color={snapshot.items.sole} />
      <mesh geometry={nodes.shoe_5.geometry} material={materials.stripes} material-color={snapshot.items.stripes} />
      <mesh geometry={nodes.shoe_6.geometry} material={materials.band} material-color={snapshot.items.band} />
      <mesh geometry={nodes.shoe_7.geometry} material={materials.patch} material-color={snapshot.items.patch} />
    </group>
  )
}

useGLTF.preload('/shoe.glb')
